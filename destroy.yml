---
- hosts: manager0
  remote_user: admin
  become: yes
  vars:
    ansible_ssh_extra_args: "-o StrictHostKeyChecking=no"
    ansible_python_interpreter: /usr/bin/python3
    ansible_ssh_private_key_file: keys/id_rsa
    volumes_format_string: !unsafe "{{range .Spec.TaskTemplate.ContainerSpec.Mounts}}{{.Source}}{{end}}"

  tasks:
    - name: Resolve stack service ids
      command: docker service ls --filter "label=com.docker.stack.namespace={{ resource_prefix }}" -q
      register: stack_services

    - name: Resolve stack service volumes
      command: "docker service inspect -f '{{ volumes_format_string }}' {{ item }}"
      register: stack_volumes
      with_items: "{{ stack_services.stdout_lines }}"

    - name: Stop stack services
      command: docker service scale {{ item }}=0
      with_items:
        - "{{ stack_services.stdout_lines }}"

    - name: Remove stack service volumes
      command: "docker volume rm {{ item }}"
      with_items: "{{stack_volumes.results|map(attribute='stdout_lines')|list}}"

    - name: Remove stack
      command: "docker stack rm {{ resource_prefix }}"

- hosts: objectstore0
  remote_user: admin
  become: yes
  vars:
    ansible_ssh_extra_args: "-o StrictHostKeyChecking=no"
    ansible_python_interpreter: /usr/bin/python3
    ansible_ssh_private_key_file: keys/id_rsa
    minio_bucket_name: "{{ lookup('env', 'MINIO_BUCKET_NAME') }}"
    minio_access_key: "{{ lookup('env', 'MINIO_ACCESS_KEY') }}"
    minio_secret_key: "{{ lookup('env', 'MINIO_SECRET_KEY') }}"

  tasks:
    - name: Remove objectstore bucket
      command: "mc rm minio/{{ minio_bucket_name }} --recursive --force"
      when:
        - minio_bucket_name != ""

    - name: Remove objectstore user
      command: "mc admin user remove minio {{ minio_access_key }}"
      when:
        - minio_access_key != ""

    - name: Remove objectstore policy
      command: "mc admin policy remove minio readwrite-{{ minio_bucket_name }}"
      when:
        - minio_access_key != ""

- hosts: database0
  remote_user: admin
  become: yes
  vars:
    ansible_ssh_extra_args: "-o StrictHostKeyChecking=no"
    ansible_python_interpreter: /usr/bin/python3
    ansible_ssh_private_key_file: keys/id_rsa
    postgres_database_name: "{{ lookup('env', 'POSTGRES_DATABASE_NAME') }}"
    postgres_database_username: "{{ lookup('env', 'POSTGRES_DATABASE_USERNAME') }}"
    postgres_database_password: "{{ lookup('env', 'POSTGRES_DATABASE_PASSWORD') }}"

  tasks:
    - name: Remove database user
      postgresql_user:
        name: "{{ postgres_database_username }}"
        state: absent
      become: true
      become_user: postgres
      when:
        - postgres_database_username != ""

    - name: Remove database
      postgresql_db:
        name: "{{ postgres_database_name }}"
        state: absent
      become: true
      become_user: postgres
      when: postgres_database_name != ""

