---
- hosts: manager0
  any_errors_fatal: true
  remote_user: admin
  become: yes
  gather_facts: no
  vars:
    ansible_ssh_extra_args: "-o StrictHostKeyChecking=no"
    ansible_python_interpreter: /usr/bin/python3
    services_format_string: !unsafe "{{.Replicas}}"

  tasks:
    - name: Create temporary deploy directory
      tempfile:
        state: directory
        suffix: deploy
      register: deploy_directory

    - name: Add environments file
      template:
        src: templates/env
        dest: "{{ deploy_directory.path }}/.env"

    - name: Add docker compose file
      copy:
        src: "{{ compose_file }}"
        dest: "{{ deploy_directory.path }}/{{ compose_file }}"

    - name: Resolve service names
      shell: docker-compose --file {{ deploy_directory.path }}/{{ compose_file }} config --services
      register: service_names

    # Constrain services by generating a docker-compose.override.yml file.
    - name: Add docker compose overrides file
      template:
        src: templates/docker-compose.override.yml
        dest: "{{ deploy_directory.path }}/docker-compose.override.yml"

    - name: Deploy docker stack
      shell: docker stack deploy --with-registry-auth --compose-file <(docker-compose --file {{ compose_file }} --file docker-compose.override.yml config) {{ resource_prefix }}
      args:
        executable: /bin/bash
        chdir: "{{ deploy_directory.path }}"

    - name: Wait for all stack services to have replicated tasks
      command: "docker stack services {{ resource_prefix }} --format '{{ services_format_string }}'"
      register: cmd_res
      retries: 30
      delay: 2
      until: cmd_res.stdout_lines | reject('search','^(?!0/1)') | list | count == 0

    - name: Remove temporary deploy directory
      file:
        state: absent
        path: "{{ deploy_directory.path }}"

- hosts: manager0
  any_errors_fatal: true
  remote_user: admin
  become: yes
  gather_facts: no
  vars:
    ansible_ssh_extra_args: "-o StrictHostKeyChecking=no"
    ansible_python_interpreter: /usr/bin/python3
    test_service: "$POSTDEPLOY_SERVICE"
    test_image: "$POSTDEPLOY_IMAGE-$CI_COMMIT_SHORT_SHA"
    test_command: "$TEST_COMMAND"

  tasks:
    - name: Resolve swarm node on which container is running for service in which test command should be run
      shell: "sleep 10 && docker service ps {{ resource_prefix }}_{{ test_service }} --filter 'desired-state=running' | grep {{ test_image }} | awk '{ n=split($4,a,\"-\"); print a[n] }'"
      register: node_res
      retries: 5
      delay: 1
      until: node_res.stdout_lines | list | count == 1

    - name: Execute test command in service container from relevant swarm node
      shell: "docker exec $(docker ps --filter name={{ resource_prefix }}_{{ test_service }} --format {{ '{{' }}.Names{{ '}}' }}) {{ test_command }}"
      delegate_to: "{{ node_res.stdout_lines[0] }}"
      register: test_command_result

    - debug:
        var: test_command_result.stdout_lines

    - debug:
        var: test_command_result.stderr_lines