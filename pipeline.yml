stages:
  - build
  - run
  - cleanup

variables:
  PIPELINE_ASSETS_ROOT_URL: https://gitlab.unomena.net/unomenapublic/gitlab-pipeline/raw/master
  GIT_STRATEGY: clone

  CI_PROJECT_REGISTRY: $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME

  PRODUCTION_COMPOSE_FILE: docker-compose.yml
  QA_COMPOSE_FILE: docker-compose.yml
  STAGING_COMPOSE_FILE: docker-compose.yml
  TEST_COMPOSE_FILE: docker-compose-test.yml

  POSTDEPLOY_COMMAND_QA: ../docker/commands/post_deploy_qa.sh
  POSTDEPLOY_COMMAND_STAGING: ../docker/commands/post_deploy_staging.sh
  POSTDEPLOY_COMMAND_PRODUCTION: ../docker/commands/post_deploy_production.sh
  POSTDEPLOY_COMMAND_TEST: ../docker/commands/test.sh
  POSTDEPLOY_IMAGE: $CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/workspace:$CI_COMMIT_REF_SLUG
  POSTDEPLOY_SERVICE: django


build master:
  stage: build
  image: $CI_REGISTRY/unomena/worker-images/build:master
  tags:
    - internal
  variables:
    CI_COMMIT_SHORT_SHA: latest
  services:
    - name: docker:dind
      # Override entrypoint to allow for insecure(non https) local vagrant registry.
      # This is required purely to test build and registry behaviour on local vagrant
      # based environments. Since the IP is a local private IP which would only be
      # reachable from in a local vagrant environment this will not have any effect on
      # production environments.
      entrypoint: ["dockerd-entrypoint.sh"]
      command: ["--insecure-registry", "192.168.30.30:5005"]
  script:
    - curl $PIPELINE_ASSETS_ROOT_URL/build.sh | sh
  only:
    - master
  except:
    - tags


build branch:
  stage: build
  image: $CI_REGISTRY/unomena/worker-images/build:master
  tags:
    - internal
  services:
    - name: docker:dind
      # Override entrypoint to allow for insecure(non https) local vagrant registry.
      # This is required purely to test build and registry behaviour on local vagrant
      # based environments. Since the IP is a local private IP which would only be
      # reachable from in a local vagrant environment this will not have any effect on
      # production environments.
      entrypoint: ["dockerd-entrypoint.sh"]
      command: ["--insecure-registry", "192.168.30.30:5005"]
  script:
    - curl $PIPELINE_ASSETS_ROOT_URL/build.sh | sh
  only:
    - web
    - merge_requests
  except:
    - master
    - tags


environment deploy:
  stage: run
  image: $CI_REGISTRY/unomena/worker-images/deploy:master
  tags:
    - internal
  variables:
    COMPOSE_FILE: $QA_COMPOSE_FILE
    POSTDEPLOY_COMMAND: $POSTDEPLOY_COMMAND_QA
    STAGE: qa
    RESOURCE_PREFIX: $RESOURCE_PREFIX_ENVIRONMENT-qa-$CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG
    STACK_HOSTNAME: $CI_COMMIT_REF_SLUG.$CI_PROJECT_NAME.$ROOT_DOMAIN_INTERNAL
  environment:
    name: qa/$CI_COMMIT_REF_SLUG
    url: https://$CI_COMMIT_REF_SLUG.$CI_PROJECT_NAME.$ROOT_DOMAIN_INTERNAL
    on_stop: environment destroy
  script:
    - curl $PIPELINE_ASSETS_ROOT_URL/deploy.sh | bash
  when: always
  only:
    - web
  except:
    - master
    - tags


tests:
  stage: run
  image: $CI_REGISTRY/unomena/worker-images/deploy:master
  tags:
    - internal
  variables:
    COMPOSE_FILE: $TEST_COMPOSE_FILE
    POSTDEPLOY_COMMAND: $POSTDEPLOY_COMMAND_TEST
    STAGE: test
    RESOURCE_PREFIX: $RESOURCE_PREFIX_ENVIRONMENT-test-$CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG
    STACK_HOSTNAME: test.$CI_COMMIT_REF_SLUG.$CI_PROJECT_NAME.$ROOT_DOMAIN_INTERNAL
  script:
    - curl $PIPELINE_ASSETS_ROOT_URL/deploy.sh | bash
  after_script:
    - curl $PIPELINE_ASSETS_ROOT_URL/destroy.sh | bash
  artifacts:
    paths:
    - payload/junit.xml
    - payload/test_report.html
    reports:
      junit: payload/junit.xml
    expire_in: 4 week
    when: always
  only:
    - web
    - merge_requests
  except:
    - master
    - tags

environment destroy:
  stage: cleanup
  image: $CI_REGISTRY/unomena/worker-images/deploy:master
  tags:
    - internal
  variables:
    STAGE: qa
    GIT_STRATEGY: none
    RESOURCE_PREFIX: $RESOURCE_PREFIX_ENVIRONMENT-qa-$CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG
    STACK_HOSTNAME: $CI_COMMIT_REF_SLUG.$CI_PROJECT_NAME.$ROOT_DOMAIN_INTERNAL
  script:
    - curl $PIPELINE_ASSETS_ROOT_URL/destroy.sh | bash
  environment:
    name: qa/$CI_COMMIT_REF_SLUG
    action: stop
  when: manual
  only:
    - web
  except:
    - master
    - tags


build:
  stage: build
  image: $CI_REGISTRY/unomena/worker-images/build:master
  tags:
    - internal
  services:
    - name: docker:dind
      # Override entrypoint to allow for insecure(non https) local vagrant registry.
      # This is required purely to test build and registry behaviour on local vagrant
      # based environments. Since the IP is a local private IP which would only be
      # reachable from in a local vagrant environment this will not have any effect on
      # production environments.
      entrypoint: ["dockerd-entrypoint.sh"]
      command: ["--insecure-registry", "192.168.30.30:5005"]
  script:
    - curl $PIPELINE_ASSETS_ROOT_URL/enforce_latest_tag.sh | sh
    - curl $PIPELINE_ASSETS_ROOT_URL/build.sh | sh
  only:
    - tags
  except:
    - branches


staging deploy:
  stage: run
  image: $CI_REGISTRY/unomena/worker-images/deploy:master
  tags:
    - internal
  variables:
    COMPOSE_FILE: $STAGING_COMPOSE_FILE
    POSTDEPLOY_COMMAND: $POSTDEPLOY_COMMAND_STAGING
    STAGE: staging
    RESOURCE_PREFIX: $RESOURCE_PREFIX_ENVIRONMENT-staging-$CI_PROJECT_NAME
    STACK_HOSTNAME: staging.$CI_PROJECT_NAME.$ROOT_DOMAIN_INTERNAL
  environment:
    name: staging
    url: https://staging.$CI_PROJECT_NAME.$ROOT_DOMAIN_INTERNAL
    on_stop: staging destroy
  script:
    - curl $PIPELINE_ASSETS_ROOT_URL/deploy.sh | bash
  only:
    - tags
  except:
    - branches


staging destroy:
  stage: cleanup
  image: $CI_REGISTRY/unomena/worker-images/deploy:master
  tags:
    - internal
  variables:
    STAGE: staging
    GIT_STRATEGY: none
    RESOURCE_PREFIX: $RESOURCE_PREFIX_ENVIRONMENT-staging-$CI_PROJECT_NAME
    STACK_HOSTNAME: staging.$CI_PROJECT_NAME.$ROOT_DOMAIN_INTERNAL
  script:
    - curl $PIPELINE_ASSETS_ROOT_URL/destroy.sh | bash
  environment:
    name: staging
    action: stop
  when: manual
  only:
    - tags
  except:
    - branches


production deploy:
  stage: run
  image: $CI_REGISTRY/unomena/worker-images/deploy:master
  tags:
    - production
  variables:
    COMPOSE_FILE: $PRODUCTION_COMPOSE_FILE
    POSTDEPLOY_COMMAND: $POSTDEPLOY_COMMAND_PRODUCTION
    STAGE: production
    RESOURCE_PREFIX: $RESOURCE_PREFIX_ENVIRONMENT-production-$CI_PROJECT_NAME
    STACK_HOSTNAME: $PRODUCTION_STACK_HOSTNAME
  environment:
    name: production
    url: https://$PRODUCTION_STACK_HOSTNAME
  script:
    - curl $PIPELINE_ASSETS_ROOT_URL/deploy.sh | bash
  only:
    - tags
  except:
    - branches
  when: manual