---
- hosts: database0
  remote_user: admin
  become: yes
  vars:
    ansible_ssh_extra_args: "-o StrictHostKeyChecking=no"
    ansible_python_interpreter: /usr/bin/python3
    ansible_ssh_private_key_file: keys/id_rsa
    postgres_database_name: "{{ lookup('env', 'POSTGRES_DATABASE_NAME') }}"
    postgres_database_username: "{{ lookup('env', 'POSTGRES_DATABASE_USERNAME') }}"
    postgres_database_password: "{{ lookup('env', 'POSTGRES_DATABASE_PASSWORD') }}"

  tasks:
    - name: Create database
      postgresql_db:
        name: "{{ postgres_database_name }}"
      become: true
      become_user: postgres
      when: postgres_database_name != ""

    - name: Create database user
      postgresql_user:
        db: "{{ postgres_database_name }}"
        name: "{{ postgres_database_username }}"
        password: "{{ postgres_database_password }}"
      become: true
      become_user: postgres
      when:
        - postgres_database_name != ""
        - postgres_database_username != ""
        - postgres_database_password != ""

- hosts: manager0
  remote_user: admin
  become: yes
  vars:
    ansible_ssh_extra_args: "-o StrictHostKeyChecking=no"
    ansible_python_interpreter: /usr/bin/python3
    ansible_ssh_private_key_file: keys/id_rsa
    postdeploy_image: "{{ lookup('env', 'POSTDEPLOY_IMAGE') }}"
    postdeploy_command: "{{ lookup('env', 'POSTDEPLOY_COMMAND') }}"
    services_format_string: !unsafe "{{.Replicas}}"

  tasks:
    - name: Add docker compose file
      copy:
        src: "{{ compose_file }}"
        dest: "/{{ compose_file }}"

    - name: Deploy docker stack
      shell: docker stack deploy --with-registry-auth -c /{{ compose_file }} {{ resource_prefix }}
      environment:
        AWS_ACCESS_KEY: "{{ aws_access_key }}"
        AWS_SECRET_KEY: "{{ aws_secret_key }}"
        STAGE: "{{ stage }}"
        RESOURCE_PREFIX: "{{ resource_prefix }}"
        STACK_HOSTNAME: "{{ stack_hostname }}"
        CI_COMMIT_REF_SLUG: "{{ lookup('env', 'CI_COMMIT_REF_SLUG') }}"
        CI_PROJECT_REGISTRY: "{{ lookup('env', 'CI_PROJECT_REGISTRY') }}"
        DATABASE0_IP: "{{ hostvars['database0'].ansible_host }}"

    - name: Wait for all stack services to have replicated tasks
      command: "docker stack services {{ resource_prefix }} --format '{{ services_format_string }}'"
      register: cmd_res
      retries: 30
      delay: 2
      until: cmd_res.stdout_lines | reject('search','^(?!0)') | list | count == 0

    - name: Execute post deploy
      shell: >
        docker pull {{ postdeploy_image }};
        docker run
        --env AWS_ACCESS_KEY
        --env AWS_SECRET_KEY
        --network={{ resource_prefix }}_default
        --add-host=database0:{{ hostvars['database0'].ansible_host }}
        --rm
        -ti
        {{ postdeploy_image }}
        {{ postdeploy_command }}
      environment:
        AWS_ACCESS_KEY: "{{ aws_access_key }}"
        AWS_SECRET_KEY: "{{ aws_secret_key }}"
        STAGE: "{{ stage }}"
        RESOURCE_PREFIX: "{{ resource_prefix }}"
        STACK_HOSTNAME: "{{ stack_hostname }}"
        CI_COMMIT_REF_SLUG: "{{ lookup('env', 'CI_COMMIT_REF_SLUG') }}"
        CI_PROJECT_REGISTRY: "{{ lookup('env', 'CI_PROJECT_REGISTRY') }}"
      register: post_deploy

    - debug:
        var: post_deploy.stdout_lines

    - debug:
        var: post_deploy.stderr_lines

    - name: Remove docker compose file
      file:
        state: absent
        path: "/{{ compose_file }}"