---
- hosts: database0
  remote_user: admin
  become: yes
  vars:
    ansible_ssh_extra_args: "-o StrictHostKeyChecking=no"
    ansible_python_interpreter: /usr/bin/python3
    ansible_ssh_private_key_file: keys/id_rsa
    postgres_database_name: "{{ resource_prefix }}-database"
    postgres_database_username: "{{ resource_prefix }}-user"
    postgres_database_password: "{{ lookup('env', 'POSTGRES_DATABASE_PASSWORD') }}"

  tasks:
    - name: Create database
      postgresql_db:
        name: "{{ postgres_database_name }}"
      become: true
      become_user: postgres
      when:
        - postgres_database_name != ""
        - postgres_database_username != ""
        - postgres_database_password != ""

    - name: Create database user
      postgresql_user:
        db: "{{ postgres_database_name }}"
        name: "{{ postgres_database_username }}"
        password: "{{ postgres_database_password }}"
      become: true
      become_user: postgres
      when:
        - postgres_database_name != ""
        - postgres_database_username != ""
        - postgres_database_password != ""

- hosts: objectstore0
  remote_user: admin
  become: yes
  vars:
    ansible_ssh_extra_args: "-o StrictHostKeyChecking=no"
    ansible_python_interpreter: /usr/bin/python3
    ansible_ssh_private_key_file: keys/id_rsa
    minio_bucket_name: "{{ resource_prefix }}-bucket"
    minio_access_key: "{{ resource_prefix }}-user"
    minio_secret_key: "{{ lookup('env', 'MINIO_SECRET_KEY') }}"

  tasks:
    - name: Add objectstore user policy definition
      copy:
        content: |
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Action": [
                  "s3:GetBucketLocation",
                  "s3:ListBucket",
                  "s3:ListBucketMultipartUploads"
                ],
                "Resource": [
                  "arn:aws:s3:::{{ minio_bucket_name }}"
                ],
                "Sid": ""
              },
              {
                "Effect": "Allow",
                "Action": [
                  "s3:AbortMultipartUpload",
                  "s3:DeleteObject",
                  "s3:GetObject",
                  "s3:ListMultipartUploadParts",
                  "s3:PutObject"
                ],
                "Resource": [
                  "arn:aws:s3:::{{ minio_bucket_name }}/*"
                ],
                "Sid": ""
              }
            ]
          }
        dest: /tmp/minio_policy_{{ minio_bucket_name }}.json
      when:
        - minio_bucket_name != ""
        - minio_access_key != ""
        - minio_secret_key != ""

    - name: Create objectstore user policy
      command: "mc admin policy add minio readwrite-{{ minio_bucket_name }} /tmp/minio_policy_{{ minio_bucket_name }}.json"
      when:
        - minio_bucket_name != ""
        - minio_access_key != ""
        - minio_secret_key != ""

    - name: Remove objectstore user policy definition
      file:
        state: absent
        path: "/tmp/minio_policy_{{ minio_bucket_name }}.json"
      when:
        - minio_bucket_name != ""
        - minio_access_key != ""
        - minio_secret_key != ""

    - name: Create objectstore user
      command: "mc admin user add minio {{ minio_access_key }} {{ minio_secret_key }} readwrite-{{ minio_bucket_name }}"
      when:
        - minio_bucket_name != ""
        - minio_access_key != ""
        - minio_secret_key != ""

    - name: List objectstore buckets
      command: mc ls minio
      register: minio_buckets

    - name: Create objectstore bucket
      command: "mc mb minio/{{ minio_bucket_name }}"
      when:
        - minio_bucket_name != ""
        - minio_access_key != ""
        - minio_secret_key != ""
        - "' ' ~ minio_bucket_name ~ '/' not in minio_buckets.stdout"

    # This is set to enable unauthenticated download of all content contained in the bucket
    # via nginx proxy_pass directive.
    - name: Set bucket download policy
      command: "mc policy download minio/{{ minio_bucket_name }}"
      when:
        - minio_bucket_name != ""
        - minio_access_key != ""
        - minio_secret_key != ""

- hosts: queue0
  remote_user: admin
  become: yes
  vars:
    ansible_ssh_extra_args: "-o StrictHostKeyChecking=no"
    ansible_python_interpreter: /usr/bin/python3
    ansible_ssh_private_key_file: keys/id_rsa
    rabbitmq_vhost: "/{{ resource_prefix }}-vhost"
    rabbitmq_username: "{{ resource_prefix }}-user"
    rabbitmq_password: "{{ lookup('env', 'RABBITMQ_PASSWORD') }}"

  tasks:
    - name: Create rabbitmq vhost
      rabbitmq_vhost:
        name: "{{ rabbitmq_vhost }}"
        state: present
      when:
        - rabbitmq_vhost != ""
        - rabbitmq_username != ""
        - rabbitmq_password != ""

    - name: Create rabbitmq user
      rabbitmq_user:
        user: "{{ rabbitmq_username }}"
        password: "{{ rabbitmq_password }}"
        permissions:
          - vhost: "{{ rabbitmq_vhost }}"
            configure_priv: .*
            read_priv: .*
            write_priv: .*
        state: present
      when:
        - rabbitmq_vhost != ""
        - rabbitmq_username != ""
        - rabbitmq_password != ""

- hosts: manager0
  remote_user: admin
  become: yes
  vars:
    ansible_ssh_extra_args: "-o StrictHostKeyChecking=no"
    ansible_python_interpreter: /usr/bin/python3
    ansible_ssh_private_key_file: keys/id_rsa
    postdeploy_image: "{{ lookup('env', 'POSTDEPLOY_IMAGE') }}"
    postdeploy_command: "{{ lookup('env', 'POSTDEPLOY_COMMAND') }}"
    services_format_string: !unsafe "{{.Replicas}}"

  tasks:
    - name: Add docker compose file
      copy:
        src: "{{ compose_file }}"
        dest: "/{{ compose_file }}"

    - name: Deploy docker stack
      shell: docker stack deploy --with-registry-auth -c /{{ compose_file }} {{ resource_prefix }}
      environment:
        AWS_ACCESS_KEY: "{{ aws_access_key }}"
        AWS_SECRET_KEY: "{{ aws_secret_key }}"
        STAGE: "{{ stage }}"
        RESOURCE_PREFIX: "{{ resource_prefix }}"
        STACK_HOSTNAME: "{{ stack_hostname }}"
        CI_COMMIT_REF_SLUG: "{{ lookup('env', 'CI_COMMIT_REF_SLUG') }}"
        CI_PROJECT_REGISTRY: "{{ lookup('env', 'CI_PROJECT_REGISTRY') }}"
        DATABASE_IP: "{{ hostvars['database0'].ansible_host }}"
        OBJECTSTORE_IP: "{{ hostvars['objectstore0'].ansible_host }}"
        QUEUE_IP: "{{ hostvars['queue0'].ansible_host }}"
        MINIO_BUCKET_NAME: "{{ resource_prefix }}-bucket"
        MINIO_ACCESS_KEY: "{{ resource_prefix }}-user"
        MINIO_SECRET_KEY: "{{ lookup('env', 'MINIO_SECRET_KEY') }}"
        RABBITMQ_VHOST: "/{{ resource_prefix }}-vhost"
        RABBITMQ_USERNAME: "{{ resource_prefix }}-user"
        RABBITMQ_PASSWORD: "{{ lookup('env', 'RABBITMQ_PASSWORD') }}"
        POSTGRES_DATABASE_NAME: "{{ resource_prefix }}-database"
        POSTGRES_DATABASE_USERNAME: "{{ resource_prefix }}-user"
        POSTGRES_DATABASE_PASSWORD: "{{ lookup('env', 'POSTGRES_DATABASE_PASSWORD') }}"

    - name: Wait for all stack services to have replicated tasks
      command: "docker stack services {{ resource_prefix }} --format '{{ services_format_string }}'"
      register: cmd_res
      retries: 30
      delay: 2
      until: cmd_res.stdout_lines | reject('search','^(?!0)') | list | count == 0

    - name: Execute post deploy
      shell: >
        docker pull {{ postdeploy_image }};
        docker run
        --env AWS_ACCESS_KEY
        --env AWS_SECRET_KEY
        --env MINIO_BUCKET_NAME
        --env MINIO_ACCESS_KEY
        --env MINIO_SECRET_KEY
        --env POSTGRES_DATABASE_NAME
        --env POSTGRES_DATABASE_USERNAME
        --env POSTGRES_DATABASE_PASSWORD
        --env RABBITMQ_VHOST
        --env RABBITMQ_USERNAME
        --env RABBITMQ_PASSWORD
        --network={{ resource_prefix }}_default
        --add-host=database:{{ hostvars['database0'].ansible_host }}
        --add-host=objectstore:{{ hostvars['objectstore0'].ansible_host }}
        --add-host=queue:{{ hostvars['queue0'].ansible_host }}
        --rm
        -ti
        {{ postdeploy_image }}
        {{ postdeploy_command }}
      environment:
        AWS_ACCESS_KEY: "{{ aws_access_key }}"
        AWS_SECRET_KEY: "{{ aws_secret_key }}"
        STAGE: "{{ stage }}"
        RESOURCE_PREFIX: "{{ resource_prefix }}"
        STACK_HOSTNAME: "{{ stack_hostname }}"
        CI_COMMIT_REF_SLUG: "{{ lookup('env', 'CI_COMMIT_REF_SLUG') }}"
        CI_PROJECT_REGISTRY: "{{ lookup('env', 'CI_PROJECT_REGISTRY') }}"
        MINIO_BUCKET_NAME: "{{ resource_prefix }}-bucket"
        MINIO_ACCESS_KEY: "{{ resource_prefix }}-user"
        MINIO_SECRET_KEY: "{{ lookup('env', 'MINIO_SECRET_KEY') }}"
        POSTGRES_DATABASE_NAME: "{{ resource_prefix }}-database"
        POSTGRES_DATABASE_USERNAME: "{{ resource_prefix }}-user"
        POSTGRES_DATABASE_PASSWORD: "{{ lookup('env', 'POSTGRES_DATABASE_PASSWORD') }}"
        RABBITMQ_VHOST: "/{{ resource_prefix }}-vhost"
        RABBITMQ_USERNAME: "{{ resource_prefix }}-user"
        RABBITMQ_PASSWORD: "{{ lookup('env', 'RABBITMQ_PASSWORD') }}"
      register: post_deploy

    - debug:
        var: post_deploy.stdout_lines

    - debug:
        var: post_deploy.stderr_lines

    - name: Remove docker compose file
      file:
        state: absent
        path: "/{{ compose_file }}"